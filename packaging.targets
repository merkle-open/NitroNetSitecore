<Project ToolsVersion="15.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup Condition=" '$(OS)' == 'Windows_NT'">
    <!-- Windows specific commands -->
    <NuGetToolsPath>$([System.IO.Path]::Combine($(SolutionDir), ".nuget"))</NuGetToolsPath>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(OS)' != 'Windows_NT'">
    <!-- We need to launch nuget.exe with the mono command if we're not on windows -->
    <NuGetToolsPath>$(SolutionDir).nuget</NuGetToolsPath>
  </PropertyGroup>
  <!--
    NuGet default properties
    Can be overwritten with MSBuild parameters (f.e. "... /p:BuildPackageCustom=false ...")
  -->
  <PropertyGroup>
    <!-- use custom nuget package build -->
    <BuildPackageCustom Condition="'$(BuildPackageCustom)' == ''">true</BuildPackageCustom>
    <!-- publish nuget packages -->
    <PublishPackage Condition="'$(PublishPackage)' == ''">true</PublishPackage>
    <!-- push to local nuget repository -->
    <NugetRepository Condition="'$(NugetRepository)' == ''">C:\nuget_local</NugetRepository>
    <PrereleaseVersion Condition="'$(PrereleaseVersion)' == ''"></PrereleaseVersion>
	<!-- product version -->
    <ProductVersion Condition="'$(ProductVersion)' == ''">Sitecore82</ProductVersion>
  </PropertyGroup>
  <!-- get package version from versioning.target, if any -->
  <Choose>  
	<When Condition="'$(PrereleaseVersion)' != ''">  
	  <PropertyGroup>
	    <NugetPackageVersion>$(PackageVersion)-$(PrereleaseVersion)$([System.String]::Format('{0:000}', $([MSBuild]::Add($(BuildNumber), 0))))</NugetPackageVersion>
	  </PropertyGroup>
	</When>
	<Otherwise>
	  <PropertyGroup>
	    <NugetPackageVersion>$(PackageVersion)</NugetPackageVersion>
	  </PropertyGroup>
	</Otherwise>
  </Choose>
	<Choose>
	<!-- No core version provided by the build command therefore use the same version for NitroNetCore as for the actual build-->
		<When Condition="'$(NitroNetCoreMajorVersion)' == '' Or '$(NitroNetCoreMinorVersion)'=='' Or '$(NitroNetCorePatchVersion)'=='' Or '$(NitroNetCoreBuildnumber)'==''">
			<PropertyGroup>
				<DependentNitroNetVersion>$(NugetPackageVersion)</DependentNitroNetVersion>
			</PropertyGroup>
		</When>
		<When Condition="'$(NitroNetCorePrereleaseVersion)' !=''">
			<PropertyGroup>
				<DependentNitroNetVersion>$(NitroNetCoreMajorVersion).$(NitroNetCoreMinorVersion).$(NitroNetCorePatchVersion)-$(NitroNetCorePrereleaseVersion)$([System.String]::Format('{0:000}', $([MSBuild]::Add($(NitroNetCoreBuildnumber), 0))))</DependentNitroNetVersion>
			</PropertyGroup>
		</When>
		<Otherwise>
			<PropertyGroup>
				<DependentNitroNetVersion>$(NitroNetCoreMajorVersion).$(NitroNetCoreMinorVersion).$(NitroNetCorePatchVersion)</DependentNitroNetVersion>
			</PropertyGroup>
		</Otherwise>
	</Choose>
  <PropertyGroup>
    <BuildDependsOn>
      $(BuildDependsOn);
      BuildPackageCustom;
      PublishPackage;
    </BuildDependsOn>
    <NuGetExePath Condition=" '$(NuGetExePath)' == '' ">$(NuGetToolsPath)\NuGet.exe</NuGetExePath>
    <NuGetCommand Condition=" '$(OS)' == 'Windows_NT'">"$(NuGetExePath)"</NuGetCommand>
    <NuGetCommand Condition=" '$(OS)' != 'Windows_NT' ">mono --runtime=v4.0.30319 $(NuGetExePath)</NuGetCommand>
    <_NugetApiKey Condition="'$(NugetApiKey)' != ''"> -ApiKey "$(NugetApiKey)"</_NugetApiKey>
    <PackageOutputDir>$([System.IO.Path]::GetDirectoryName('$(ProjectDir)$(IntermediateOutputPath)'))</PackageOutputDir>
    <PackageSpec>$(ProjectPath.Replace('.csproj', '.nuspec'))</PackageSpec>
    <PackageOutput>$(ProjectName.Replace('.csproj', '')).*$(NugetPackageVersion).nupkg</PackageOutput>
    <BuildCommandSolution Condition="'$(NugetPackageVersion)' != ''">$(NuGetCommand) pack "$(ProjectPath)" -Properties "Configuration=$(Configuration);Platform=$(Platform)" $(NonInteractiveSwitch) -OutputDirectory "$(PackageOutputDir)" $(IncludeReferencedProjects) -Properties "ProductVersion=$(ProductVersion);DependentVersion=$(NugetPackageVersion);DependentNitroNetVersion=$(DependentNitroNetVersion)" -Version "$(NugetPackageVersion)" -Symbols -SymbolPackageFormat snupkg</BuildCommandSolution>
    <PublishCommand>$(NuGetCommand) push "$(PackageOutputDir)\$(PackageOutput)" $(_NugetApiKey) -source "$(NugetRepository)"</PublishCommand>
  </PropertyGroup>
  <Target Name="PublishPackage" Condition="'$(PublishPackage)' == 'true'">
    <Exec Command="$(PublishCommand)" LogStandardErrorAsError="true" />
  </Target>
  <Target Name="BuildPackageCustom" Condition="$(BuildPackageCustom) == 'true'">
    <Exec Command="$(BuildCommandSolution)" LogStandardErrorAsError="true" />
  </Target>
</Project>